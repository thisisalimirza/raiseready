import { NextApiRequest, NextApiResponse } from 'next'
import { createSupabaseAdmin } from '@/lib/supabase'
import { Pack } from '@/types'
import puppeteer from 'puppeteer'

export async function generatePDF(pack: Pack): Promise<Buffer> {
  // Create HTML content for download
  const htmlContent = createHTMLContent(pack)
  
  // Return HTML as buffer for download
  const buffer = Buffer.from(htmlContent, 'utf-8')
  return buffer
}

function createHTMLContent(pack: Pack): string {
  const date = new Date(pack.created_at).toLocaleDateString()
  
  // Convert basic markdown to HTML
  const negotiationHtml = pack.negotiation_content
    .replace(/^# (.*$)/gm, '<h1>$1</h1>')
    .replace(/^## (.*$)/gm, '<h2>$1</h2>')
    .replace(/^### (.*$)/gm, '<h3>$1</h3>')
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\n\n/g, '</p><p>')
    .replace(/\n/g, '<br>')
    .replace(/^(.)/gm, '<p>$1')
    .replace(/$/gm, '</p>')
    .replace(/<p><h/g, '<h')
    .replace(/<\/h([1-6])><\/p>/g, '</h$1>')
  
  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Raise Ready - ${pack.job_title} Salary Negotiation Package</title>
  <style>
    body { font-family: Arial, sans-serif; line-height: 1.6; margin: 40px; }
    h1 { color: #2563eb; border-bottom: 2px solid #2563eb; padding-bottom: 10px; }
    h2 { color: #1e40af; margin-top: 30px; margin-bottom: 15px; }
    h3 { color: #374151; margin-top: 25px; margin-bottom: 10px; }
    .meta { color: #6b7280; margin-bottom: 30px; }
    .salary-info { background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0; }
    .achievement { margin: 10px 0; padding: 5px 0; }
    .content { }
    .content h2 { color: #1e40af; margin-top: 30px; margin-bottom: 15px; }
    .content h3 { color: #374151; margin-top: 25px; margin-bottom: 10px; }
    .content p { margin: 10px 0; }
    .content ul { margin: 10px 0; padding-left: 20px; }
    .content li { margin: 5px 0; }
    .content strong { color: #111827; }
    .footer { margin-top: 50px; text-align: center; color: #6b7280; font-size: 14px; }
  </style>
</head>
<body>
  <h1>RAISE READY - SALARY NEGOTIATION PACKAGE</h1>
  
  <div class="meta">
    <strong>Generated on:</strong> ${date}<br>
    <strong>Job Title:</strong> ${pack.job_title}<br>
    <strong>Location:</strong> ${pack.city_or_remote}
  </div>

  <h2>MARKET ANALYSIS</h2>
  <div class="salary-info">
    <strong>Current Salary:</strong> $${pack.current_salary.toLocaleString()}<br>
    <strong>Market Average:</strong> $${pack.market_data.average.toLocaleString()}<br>
    <strong>Market Range:</strong> $${pack.market_data.p25.toLocaleString()} - $${pack.market_data.p75.toLocaleString()}
  </div>

  <h2>KEY ACHIEVEMENTS</h2>
  ${pack.achievements.map((achievement, index) => `<div class="achievement">${index + 1}. ${achievement}</div>`).join('')}

  <div class="content">${negotiationHtml}</div>

  <div class="footer">
    Generated by RaiseReady<br>
    https://raiseready.com
  </div>
</body>
</html>
`
}

// API handler for PDF generation
export async function handlePDFGeneration(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { id } = req.query
    
    // Get the authorization header
    const authHeader = req.headers.authorization
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ error: 'No authorization token provided' })
    }

    const token = authHeader.split(' ')[1]
    
    // Verify the user with Supabase
    const supabaseAdmin = createSupabaseAdmin()
    const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token)
    
    if (authError || !user) {
      return res.status(401).json({ error: 'Invalid authorization token' })
    }

    // Get the pack from database
    const { data: pack, error: packError } = await supabaseAdmin
      .from('packs')
      .select('*')
      .eq('id', id)
      .eq('user_id', user.id)
      .single()

    if (packError || !pack) {
      return res.status(404).json({ error: 'Pack not found' })
    }

    // Generate PDF
    const pdfBuffer = await generatePDF(pack)

    // Set response headers for HTML download
    res.setHeader('Content-Type', 'text/html')
    res.setHeader('Content-Disposition', `attachment; filename="${pack.job_title}-negotiation-script.html"`)
    res.setHeader('Content-Length', pdfBuffer.length)

    // Send the PDF
    res.send(pdfBuffer)
  } catch (error) {
    console.error('PDF generation error:', error)
    res.status(500).json({ error: 'Internal server error' })
  }
}